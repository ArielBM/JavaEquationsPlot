/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compiladores.proyecto2;

import Analizadores.Analizador_Lexico;
import Analizadores.Sintactico;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import jdk.jfr.events.FileWriteEvent;
import org.math.plot.Plot2DPanel;

/**
 *
 * @author ArielBM
 */
public class Main extends javax.swing.JFrame {

    Plot2DPanel grafica;

    ArrayList<Double> lista;
    ArrayList<Double> inferiores;
    ArrayList<Double> superiores;

    Scanner sc;
    int c;
    String carpeta, doc;

    String carpetaActual;
    String archivoActual;
    String ecuacionActual;

    boolean bandera;

    /**
     * Creates new form Main
     */
    public Main() {

        initComponents();
        bandera = false;

        jComboBox1.removeAllItems();
        jComboBox2.removeAllItems();
        jComboBox3.removeAllItems();

        jComboBox1.addItem("Aún no se han cargado ecuaciones");

        sc = new Scanner(System.in);

        lista = new ArrayList<Double>();
        inferiores = new ArrayList<Double>();
        superiores = new ArrayList<Double>();

        grafica = new Plot2DPanel();
        grafica.setBounds(0, 0, 550, 495);
        grafica.addLegend("SOUTH");
        grafica.setVisible(true);
        jPanel1.add(grafica);

//        jLabel3.setVisible(false);
//        jComboBox2.setVisible(false);
//        jLabel4.setVisible(false);
//        jComboBox3.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("[Compiladores]Proyecto2");
        setPreferredSize(new java.awt.Dimension(1100, 700));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel1.setText("Grafica:");

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel2.setText("Ecuación:");

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel3.setText("Archivo:");

        jComboBox2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel4.setText("Carpeta");

        jComboBox3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 24)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel5.setText("Raíces:");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 538, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Abrir...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Salir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(430, 430, 430))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane2)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox2, 0, 515, Short.MAX_VALUE)
                                    .addComponent(jComboBox3, javax.swing.GroupLayout.Alignment.TRAILING, 0, 515, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void graficaryEncontrar(String formula, String variable) {

        Funcion f = new Funcion(formula, variable);
        Raiz r = new Raiz();

        lista.clear();
        inferiores.clear();
        superiores.clear();

        double[] x = new double[100];
        double[] y = new double[100];

        double xi = -50;

        int i;
        for (i = 0; i < 100; i++) {
            x[i] = -50 + i;
            y[i] = f.evaluar(x[i]);

            if (y[i] == 0) {
                lista.add(x[i] * -1);
            }

            if (i > 0) {

                if (y[i] < 0 && y[i - 1] > 0 || y[i - 1] < 0 && y[i] > 0) {
                    lista.add((r.encontrarRaiz(f, x[i - 1], x[i])) * -1);
                }
            }

            grafica.removeAllPlots();
            grafica.addLinePlot(formula, x, y);
            jTextArea1.setText("");

            if (lista.size() > 0) {

                int k;
                String signo;
                for (k = 0; k < lista.size(); k++) {

                    if (lista.get(k) >= 0) {
                        signo = "+";
                    } else {
                        signo = "";
                    }

                    jTextArea1.append("(" + Sintactico.letra  + signo + lista.get(k).toString() + " )" + "\n");
                }
            } else {
                jTextArea1.setText("La ecuación presentada no contiene soluciones reales");
            }
        }

    }

    private void limpiarDirectorio(File arch) {
        if (!arch.exists()) {
            return;
        }

        if (arch.isDirectory()) {
            for (File f : arch.listFiles()) {
                limpiarDirectorio(f);
            }
        }

        arch.delete();

    }

    private void crearInicial() {
        File f = new File("archivos");
        f.mkdir();

        File g = new File("archivos\\entrada");
        g.mkdir();

        File h = new File("archivos\\salida");
        h.mkdir();

    }

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        if (bandera) {

            ecuacionActual = jComboBox1.getSelectedItem().toString();

            grafica.removeAllPlots();
            
            Sintactico.TablaErr.clear();
            Analizador_Lexico.TablaErr.clear();
            Sintactico.hayLetra = false;

            Analizador_Lexico lexico = new Analizador_Lexico(new BufferedReader(new StringReader(ecuacionActual)));
            Sintactico sintac = new Sintactico(lexico);
            try {
                sintac.parse();
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (lexico.TablaErr.size() > 0) {

                jTextArea1.setText("Error léxico en: \"" + Analizador_Lexico.TablaErr.get(0).getTexto() + "\" " + Analizador_Lexico.TablaErr.get(0).getDetalle());

            } else {

                if (Sintactico.TablaErr.size() > 0) {

                    jTextArea1.setText("Error sintáctico en: \"" + Sintactico.TablaErr.get(0).getTexto() + "\" " + Sintactico.TablaErr.get(0).getDetalle());

                } else {
                    if (Sintactico.hayLetra == false) {

                        jTextArea1.setText("No es una ecuación de orden \"n\"");

                    } else {

                        String arreglada = ecuacionActual;

                        if (arreglada.contains("**") == true) {

                            arreglada = ecuacionActual.replace("**", "^");
                        }

                        graficaryEncontrar(arreglada, Sintactico.letra);

                    }

                }

                //System.out.println("\nLa Letra a Utilizar Es: " + Sintactico.letra + "\n");
            }
        }


    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed

        if (bandera) {

            bandera = false;

            carpetaActual = jComboBox3.getSelectedItem().toString();

            File entrada2 = new File("archivos\\entrada\\" + carpetaActual + "\\");
            String misArchivos[] = entrada2.list();
            System.out.println("\nCarpeta Actual: " + "archivos\\entrada\\" + carpetaActual + "\\" + "\n");

            archivoActual = "";
            jComboBox2.removeAllItems();

            for (int v = 0; v < misArchivos.length; v++) {
                jComboBox2.addItem(misArchivos[v]);
            }
            System.out.println("\nPasó el FOR\n");

            jComboBox2.setSelectedIndex(0);
            archivoActual = jComboBox2.getSelectedItem().toString();

            BufferedReader misEC;
            try {
                misEC = new BufferedReader(new FileReader((new File("archivos\\entrada\\" + carpetaActual + "\\" + archivoActual))));

                ecuacionActual = "";
                jComboBox1.removeAllItems();

                String ec;
                while ((ec = misEC.readLine()) != null) {
                    jComboBox1.addItem(ec);
                }

                misEC.close();

                jComboBox1.setSelectedIndex(0);
                ecuacionActual = jComboBox1.getSelectedItem().toString();

                Sintactico.TablaErr.clear();
                Analizador_Lexico.TablaErr.clear();
                Sintactico.hayLetra = false;

                Analizador_Lexico lexico = new Analizador_Lexico(new BufferedReader(new StringReader(ecuacionActual)));

                if (Analizador_Lexico.TablaErr.size() > 0) {

                    jTextArea1.setText("Error léxico en: \"" + Analizador_Lexico.TablaErr.get(0).getTexto() + "\" " + Analizador_Lexico.TablaErr.get(0).getDetalle());

                } else {

                    Sintactico sintac = new Sintactico(lexico);
                    sintac.parse();

                    if (Sintactico.TablaErr.size() > 0) {

                        jTextArea1.setText("Error sintáctico en: \"" + Sintactico.TablaErr.get(0).getTexto() + "\" " + Sintactico.TablaErr.get(0).getDetalle());

                    } else {
                        if (Sintactico.hayLetra = false) {

                            jTextArea1.setText("No es una ecuación de orden \"n\"");

                        } else {

                            String arreglada = ecuacionActual;

                            if (arreglada.contains("**") == true) {

                                arreglada = ecuacionActual.replace("**", "^");
                            }

                            graficaryEncontrar(arreglada, Sintactico.letra);

                        }

                    }

                    //System.out.println("\nLa Letra a Utilizar Es: " + Sintactico.letra + "\n");
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

            bandera = true;
        }


    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        limpiarDirectorio(new File("archivos"));
        System.exit(0);

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        String ruta;
        JFileChooser file = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILE", "txt", "text");
        file.setFileFilter(filter);
        file.showOpenDialog(this);

        if (file.getSelectedFile() != null) {

            bandera = false;

            jComboBox1.removeAll();
            jComboBox2.removeAll();
            jComboBox3.removeAll();

            limpiarDirectorio(new File("archivos"));
            crearInicial();

            ruta = file.getSelectedFile().getAbsolutePath();

            File archivo;
            FileReader fr;
            BufferedReader br;

            c = 1;
            carpeta = doc = "";

            try {

                archivo = new File(ruta);
                fr = new FileReader(archivo);
                br = new BufferedReader(fr);

                File g = null;
                File g2 = null;
                BufferedWriter bw = null;
                BufferedWriter bw2 = null;

                String linea;
                while ((linea = br.readLine()) != null) {

                    if (c == 1 || (c - 1) % 10000 == 0) {
                        if (c != 1) {
                            try {
                                bw.close();
                                bw2.close();
                            } catch (IOException ex) {
                                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                        carpeta = c + " - " + (c + 9999);
                        doc = c + " - " + (c + 99) + ".txt";

                        File f = new File("archivos\\entrada\\" + carpeta);
                        f.mkdir();

                        File f2 = new File("archivos\\salida\\" + carpeta);
                        f2.mkdir();

                        g = new File("archivos\\entrada\\" + carpeta, doc);
                        g2 = new File("archivos\\salida\\" + carpeta, doc);

                        try {
                            bw = new BufferedWriter(new FileWriter(g));
                            bw2 = new BufferedWriter(new FileWriter(g2));
                        } catch (IOException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }

                    if ((c - 1) % 100 == 0 && (c - 1) % 10000 != 0) {
                        try {
                            bw.close();
                            bw2.close();
                        } catch (IOException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        doc = c + " - " + (c + 99) + ".txt";
                        g = new File("archivos\\entrada\\" + carpeta, doc);
                        g2 = new File("archivos\\salida\\" + carpeta, doc);

                        try {
                            bw = new BufferedWriter(new FileWriter(g));
                            bw2 = new BufferedWriter(new FileWriter(g2));
                        } catch (IOException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    try {

                        bw.write(linea);
                        bw.newLine();

                        Sintactico.letra = "";
                        Sintactico.TablaErr.clear();
                        Analizador_Lexico.TablaErr.clear();
                        Sintactico.hayLetra = false;

                        Analizador_Lexico lexico = new Analizador_Lexico(new BufferedReader(new StringReader(linea)));
                        Sintactico sintac = new Sintactico(lexico);
                        sintac.parse();

                        try {

                            //                            String texto = "No.\t\tTexto\t\tTipo de Error\t\tFila\t\tColumna\t\tDetalles\n";
                            if (lexico.TablaErr.size() > 0) {

                                bw2.write(c + ". " + "Error léxico en: \"" + Analizador_Lexico.TablaErr.get(0).getTexto() + "\" " + Analizador_Lexico.TablaErr.get(0).getDetalle());
                                bw2.newLine();

                                //                                int i;
                                //                                for (i = 0; i < Analizador_Lexico.TablaErr.size(); i++) {
                                //                                    texto += (i + 1) + "\t\t" + Analizador_Lexico.TablaErr.get(i).getTexto() + "\t\t" + Analizador_Lexico.TablaErr.get(i).getTipo() + "\t\t" + Analizador_Lexico.TablaErr.get(i).getLinea() + "\t\t" + Analizador_Lexico.TablaErr.get(i).getColumna() + "\t\t" + Analizador_Lexico.TablaErr.get(i).getDetalle() + "\n";
                                //                                }
                            } else {

                                if (Sintactico.TablaErr.size() > 0) {

                                    bw2.write(c + ". " + "Error sintáctico en: \"" + Sintactico.TablaErr.get(0).getTexto() + "\" " + Sintactico.TablaErr.get(0).getDetalle());
                                    bw2.newLine();
                                    //                                    int j;
                                    //                                    for (j = 0; j < Sintactico.TablaErr.size(); j++) {
                                    //                                        texto += (j + 1) + "\t\t" + Sintactico.TablaErr.get(j).getTexto() + "\t\t" + Sintactico.TablaErr.get(j).getTipo() + "\t\t" + Sintactico.TablaErr.get(j).getLinea() + "\t\t" + Sintactico.TablaErr.get(j).getColumna() + "\t\t" + Sintactico.TablaErr.get(j).getDetalle() + "\n";
                                    //
                                    //                                    }
                                } else {
                                    if (Sintactico.hayLetra == false) {
                                        bw2.write(c + ". " + "No es una ecuación de orden \"n\"");
                                        bw2.newLine();
                                    } else {

                                        String cadena = linea;

                                        if (linea.contains("**") == true) {
                                            cadena = linea.replace("**", "^");
                                        }

                                        Funcion f = new Funcion(cadena, Sintactico.letra);
                                        Raiz r = new Raiz();

                                        lista.clear();
                                        inferiores.clear();
                                        superiores.clear();

                                        double anterior = 0;
                                        double resultado = 0;
                                        int i;
                                        int contador = -50;
                                        for (i = 0; i < 100; i++) {

                                            resultado = f.evaluar(contador);

                                            if (resultado == 0) {
                                                lista.add(Double.parseDouble(String.valueOf(contador * -1)));
                                            }

                                            if (i > 0) {
                                                if (anterior < 0 && resultado > 0 || anterior > 0 && resultado < 0) {
                                                    lista.add((r.encontrarRaiz(f, contador - 1, contador)) * -1);
                                                }
                                            }

                                            contador++;
                                            anterior = resultado;
                                        }

                                        if (lista.size() > 0) {
                                            bw2.write(c + ". ");

                                            int m;
                                            for (m = 0; m < lista.size(); m++) {
                                                if (lista.get(m) >= 0) {

                                                    bw2.write(" ( " + Sintactico.letra + "+" + lista.get(m) + " )");

                                                } else {

                                                    bw2.write(" ( " + Sintactico.letra + lista.get(m) + " )");
                                                }
                                            }

                                            bw2.newLine();
                                        } else {
                                            bw2.write(c + ". La ecuación presentada no tiene soluciones reales");
                                            bw2.newLine();
                                        }

                                    }

                                }

                                //System.out.println("\nLa Letra a Utilizar Es: " + Sintactico.letra + "\n");
                            }

                        } catch (Exception e) {

                            JOptionPane.showMessageDialog(null, "Error");
                        }

                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    c++;

                }

                try {
                    bw.close();
                    bw2.close();
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }

                File entrada = new File("archivos\\entrada\\");
                File misCarpetas[] = entrada.listFiles();

                carpetaActual = "";

                for (int v = 0; v < misCarpetas.length; v++) {
                    jComboBox3.addItem(misCarpetas[v].getName());
                }

                jComboBox3.setSelectedIndex(0);
                carpetaActual = jComboBox3.getSelectedItem().toString();

                File entrada2 = new File("archivos\\entrada\\" + carpetaActual + "\\");
                String misArchivos[] = entrada2.list();
                System.out.println("\nCarpeta Actual: " + "archivos\\entrada\\" + carpetaActual + "\\" + "\n");

                archivoActual = "";

                for (int v = 0; v < misArchivos.length; v++) {
                    jComboBox2.addItem(misArchivos[v]);
                }
                System.out.println("\nPasó el FOR\n");

                jComboBox2.setSelectedIndex(0);
                archivoActual = jComboBox2.getSelectedItem().toString();

                BufferedReader misEC = new BufferedReader(new FileReader((new File("archivos\\entrada\\" + carpetaActual + "\\" + archivoActual))));

                ecuacionActual = "";
                jComboBox1.removeAllItems();

                String ec;
                while ((ec = misEC.readLine()) != null) {
                    jComboBox1.addItem(ec);
                }

                misEC.close();

                jComboBox1.setSelectedIndex(0);
                ecuacionActual = jComboBox1.getSelectedItem().toString();

                Sintactico.TablaErr.clear();
                Analizador_Lexico.TablaErr.clear();
                Sintactico.hayLetra = false;

                Analizador_Lexico lexico = new Analizador_Lexico(new BufferedReader(new StringReader(ecuacionActual)));

                if (Analizador_Lexico.TablaErr.size() > 0) {

                    jTextArea1.setText("Error léxico en: \"" + Analizador_Lexico.TablaErr.get(0).getTexto() + "\" " + Analizador_Lexico.TablaErr.get(0).getDetalle());

                } else {

                    Sintactico sintac = new Sintactico(lexico);
                    sintac.parse();

                    if (Sintactico.TablaErr.size() > 0) {

                        jTextArea1.setText("Error sintáctico en: \"" + Sintactico.TablaErr.get(0).getTexto() + "\" " + Sintactico.TablaErr.get(0).getDetalle());

                    } else {
                        if (Sintactico.hayLetra = false) {

                            jTextArea1.setText("No es una ecuación de orden \"n\"");

                        } else {

                            String arreglada = ecuacionActual;

                            if (arreglada.contains("**") == true) {

                                arreglada = ecuacionActual.replace("**", "^");
                            }

                            graficaryEncontrar(arreglada, Sintactico.letra);

                        }

                    }

                    //System.out.println("\nLa Letra a Utilizar Es: " + Sintactico.letra + "\n");
                }

                bandera = true;

            } catch (Exception e) {
            }

        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed

        if (bandera) {

            bandera = false;

            archivoActual = jComboBox2.getSelectedItem().toString();

            BufferedReader misEC;

            try {
                misEC = new BufferedReader(new FileReader((new File("archivos\\entrada\\" + carpetaActual + "\\" + archivoActual))));

                ecuacionActual = "";
                jComboBox1.removeAllItems();

                String ec;
                while ((ec = misEC.readLine()) != null) {
                    jComboBox1.addItem(ec);
                }

                misEC.close();

                jComboBox1.setSelectedIndex(0);
                ecuacionActual = jComboBox1.getSelectedItem().toString();

                Sintactico.TablaErr.clear();
                Analizador_Lexico.TablaErr.clear();
                Sintactico.hayLetra = false;

                Analizador_Lexico lexico = new Analizador_Lexico(new BufferedReader(new StringReader(ecuacionActual)));

                if (Analizador_Lexico.TablaErr.size() > 0) {

                    jTextArea1.setText("Error léxico en: \"" + Analizador_Lexico.TablaErr.get(0).getTexto() + "\" " + Analizador_Lexico.TablaErr.get(0).getDetalle());

                } else {

                    Sintactico sintac = new Sintactico(lexico);
                    sintac.parse();

                    if (Sintactico.TablaErr.size() > 0) {

                        jTextArea1.setText("Error sintáctico en: \"" + Sintactico.TablaErr.get(0).getTexto() + "\" " + Sintactico.TablaErr.get(0).getDetalle());

                    } else {
                        if (Sintactico.hayLetra = false) {

                            jTextArea1.setText("No es una ecuación de orden \"n\"");

                        } else {

                            String arreglada = ecuacionActual;

                            if (arreglada.contains("**") == true) {

                                arreglada = ecuacionActual.replace("**", "^");
                            }

                            graficaryEncontrar(arreglada, Sintactico.letra);

                        }

                    }

                    //System.out.println("\nLa Letra a Utilizar Es: " + Sintactico.letra + "\n");
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

            bandera = true;

        }


    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
